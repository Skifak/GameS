name: Deploy GameST

on:
  push:
    branches:
      - main
      - stage

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'stage' }}
      SERVER_HOST: ${{ github.ref == 'refs/heads/main' && '202.49.176.236' || '150.241.69.143' }}
      SERVER_PATH: /opt/serv-game
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build client
        run: npm run build -- --mode ${{ env.DEPLOY_ENV }}

      - name: Deploy to server
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          
          # Копируем файлы основного стека
          scp -o StrictHostKeyChecking=no -i deploy_key -r dist server root@${{ env.SERVER_HOST }}:${{ env.SERVER_PATH }}/
          scp -o StrictHostKeyChecking=no -i deploy_key package.json docker-compose.yml docker-compose.${{ env.DEPLOY_ENV }}.yml nginx.conf Dockerfile root@${{ env.SERVER_HOST }}:${{ env.SERVER_PATH }}/
          
          # Копируем конфигурации
          scp -o StrictHostKeyChecking=no -i deploy_key -r prometheus loki grafana promtail root@${{ env.SERVER_HOST }}:${{ env.SERVER_PATH }}/

          # Копируем Supabase файлы
          scp -o StrictHostKeyChecking=no -i deploy_key -r supabase/supabase/docker root@${{ env.SERVER_HOST }}:${{ env.SERVER_PATH }}/supabase/

          # Запускаем контейнеры.
          ssh -o StrictHostKeyChecking=no -i deploy_key root@${{ env.SERVER_HOST }} << 'EOF'
            cd ${{ env.SERVER_PATH }}
            docker network create gamest-shared-network || true
            docker compose -f docker-compose.${{ env.DEPLOY_ENV }}.yml down
            docker compose -f docker-compose.${{ env.DEPLOY_ENV }}.yml up --detach --build --remove-orphans
            cd supabase
            docker compose -f docker-compose.yml down
            docker compose -f docker-compose.yml up --detach --build --remove-orphans
          EOF
          
          rm deploy_key

      - name: Notify deployment
        if: success()
        run: |
          echo "Deployed to ${{ env.DEPLOY_ENV }} environment at ${{ env.SERVER_HOST }} successfully!"