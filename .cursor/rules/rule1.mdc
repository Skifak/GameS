---
description: Правила разработки для AI-агента GameST
globs: 
alwaysApply: true
---
1. Общие принципы

1.1. AI-агент предназначен исключительно для помощи разработчикам. Он не участвует в игровом процессе и не изменяет логику игры.
1.2. Все изменения, предложенные AI-агентом, должны соответствовать архитектуре проекта и быть согласованы с разработчиками.
1.3. AI-агент обязан следовать стандартам кодирования, принятым в проекте, и соблюдать правила безопасности.
1.4. Все изменения должны проходить код-ревью перед внедрением в основной репозиторий.
2. Кодирование и архитектура

2.1. AI-агент пишет код в соответствии с архитектурой проекта:

    Клиент: React + Vite + Phaser.js
    Сервер: Node.js + Express + Colyseus
    База данных и аутентификация: Supabase
    Инфраструктура: Docker + Redis + Nginx

2.2. При разработке AI-агент должен следовать следующему порядку:

    Понимание задачи: анализ входных данных и целей изменения.
    Создание решения: генерация кода, соответствующего архитектуре.
    Оптимизация: предложение улучшений кода (производительность, безопасность).
    Документирование: добавление комментариев и объяснений к коду.

2.3. AI-агент должен генерировать код, который:

    Поддерживает модульность и переиспользуемость.
    Соответствует принципам SOLID и DRY.
    Не создает технического долга.

3. Работа с инфраструктурой

3.1. AI-агент может настраивать и модифицировать следующие компоненты:

    Docker-контейнеры и docker-compose.yml
    Nginx-конфигурацию для балансировки нагрузки и проксирования запросов
    Redis-конфигурацию для кеширования данных
    Настройку логирования (Winston, Loki)
    Мониторинг и метрики (Prometheus, Grafana)

3.2. При изменении инфраструктуры AI-агент обязан:

    Создавать безопасные конфигурации (например, не раскрывать приватные ключи).
    Проверять совместимость изменений с текущими настройками.
    Предлагать rollback-стратегии на случай сбоев.

4. Работа с базой данных

4.1. AI-агент может выполнять следующие задачи:

    Оптимизация SQL-запросов для Supabase.
    Настройка индексов и оптимизация схемы БД.
    Написание миграций для обновления структуры данных.
    Автоматизация резервного копирования.

4.2. Все SQL-запросы должны быть безопасными и защищенными от SQL-инъекций.
5. CI/CD и Автоматизация

5.1. AI-агент может обновлять и улучшать CI/CD-процессы на GitHub Actions, включая:

    Добавление автоматического тестирования перед развертыванием.
    Автоматическую сборку и деплой серверной и клиентской части.
    Настройку уведомлений об ошибках и отказах в работе сервисов.

5.2. AI-агент не выполняет автоматический деплой без подтверждения разработчика.
6. Безопасность

6.1. AI-агент должен следовать рекомендациям OWASP по безопасности.
6.2. Все файлы .env должны быть исключены из публичного репозитория.
6.3. Все генерируемые API-ключи и пароли должны храниться в безопасных местах (Supabase Secrets, GitHub Secrets).
6.4. AI-агент не должен раскрывать конфиденциальные данные в логах.
7. Ограничения и ответственность

7.1. AI-агент не принимает окончательных решений — вся работа проходит ревью разработчика.
7.2. AI-агент не изменяет игровой баланс, экономику или игровые механики.
7.3. Любые значительные изменения архитектуры должны согласовываться с командой.
8. Улучшение работы AI-агента

8.1. Разработчики могут обучать AI-агента на данных проекта (без утечки конфиденциальной информации).
8.2. AI-агент должен уметь анализировать кодовую базу и предлагать улучшения по оптимизации.
8.3. Если AI-агент сталкивается с задачей, которую не может решить, он должен уведомить разработчика, а не генерировать случайный код.

9. Генерация кода для Phaser 3
9.1. AI-агент должен следовать Phaser Style Guide и обеспечивать удобочитаемость кода.
9.2. При создании игровых объектов должны использоваться фабричные функции для уменьшения дублирования кода.
9.3. Все события (input, physics, AI, network) должны быть разделены и не смешиваться в одном файле.
9.4. AI-агент должен избегать тяжелых вычислений в update(), выносить сложные операции в отдельные сервисы или использовать отложенное выполнение.

9.1. Оптимизация работы Phaser 3
Использовать реюз объектов вместо их постоянного создания/удаления.
9.1.1. Стараться использовать tilemaps вместо отдельных спрайтов, если это возможно.
9.1.2. Оптимизировать работу с текстурами, избегать лишних ререндеров в React (использовать useMemo, useCallback).
9.1.3. Для сложных анимаций использовать TweenManager и ParticleEmitter вместо тяжелых update-циклов.

